!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){var o;
/*!
 * fullPage 3.0.8
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
/*!
 * fullPage 3.0.8
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
!function(r,i,l,a,c){void 0===(o=function(){return r.fullpage=a(i,l),r.fullpage}.call(t,n,t,e))||(e.exports=o)}(this,window,document,function(e,t){"use strict";var n="fullpage-wrapper",o="."+n,r="fp-responsive",i="fp-notransition",l="fp-destroyed",a="fp-enabled",c="fp-viewing",s="active",u="."+s,f="fp-completely",d="."+f,v=".section",p="fp-section",h="."+p,g=h+u,m="fp-tableCell",b="."+m,S="fp-auto-height",w="."+S,y=".fp-auto-height-responsive",E="fp-normal-scroll",x="fp-nav",L="#"+x,A="fp-tooltip",T="."+A,k="fp-show-active",O=".slide",M="fp-slide",C="."+M,H=C+u,I="fp-slides",B="."+I,R="fp-slidesContainer",j="."+R,N="fp-table",P="fp-slidesNav",z="."+P,D=z+" a",V=".fp-controlArrow",_="fp-prev",F="fp-controlArrow "+_,W=V+("."+_),Y="fp-controlArrow fp-next",U=V+".fp-next";function X(t,n){e.console&&e.console[t]&&e.console[t]("fullPage: "+n)}function K(e,n){return(n=arguments.length>1?n:t)?n.querySelectorAll(e):null}function $(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var o=arguments[t];if(o)for(var r in o)o.hasOwnProperty(r)&&("[object Object]"!==Object.prototype.toString.call(o[r])?e[r]=o[r]:e[r]=$(e[r],o[r]))}return e}function q(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function Q(){return"innerHeight"in e?e.innerHeight:t.documentElement.offsetHeight}function G(){return e.innerWidth}function J(e,t){var n;for(n in e=le(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var o=0;o<e.length;o++){e[o].style[n]=t[n]}return e}function Z(e,t,n){for(var o=e[n];o&&!Te(o,t);)o=o[n];return o}function ee(e,t){return Z(e,t,"previousElementSibling")}function te(e,t){return Z(e,t,"nextElementSibling")}function ne(e){return e.previousElementSibling}function oe(e){return e.nextElementSibling}function re(e){return e[e.length-1]}function ie(e,t){e=se(e)?e[0]:e;for(var n=null!=t?K(t,e.parentNode):e.parentNode.childNodes,o=0,r=0;r<n.length;r++){if(n[r]==e)return o;1==n[r].nodeType&&o++}return-1}function le(e){return se(e)?e:[e]}function ae(e){e=le(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function ce(e){e=le(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function se(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function ue(e,t){e=le(e);for(var n=0;n<e.length;n++){var o=e[n];o.classList?o.classList.add(t):o.className+=" "+t}return e}function fe(e,t){e=le(e);for(var n=t.split(" "),o=0;o<n.length;o++){t=n[o];for(var r=0;r<e.length;r++){var i=e[r];i.classList?i.classList.remove(t):i.className=i.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function de(e,t){t.appendChild(e)}function ve(e,n,o){var r;n=n||t.createElement("div");for(var i=0;i<e.length;i++){var l=e[i];(o&&!i||!o)&&(r=n.cloneNode(!0),l.parentNode.insertBefore(r,l)),r.appendChild(l)}return e}function pe(e,t){ve(e,t,!0)}function he(e,t){for("string"==typeof t&&(t=Oe(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function ge(e){for(var n=t.createDocumentFragment();e.firstChild;)n.appendChild(e.firstChild);e.parentNode.replaceChild(n,e)}function me(e,t){return e&&1===e.nodeType?Te(e,t)?e:me(e.parentNode,t):null}function be(e,t){we(e,e.nextSibling,t)}function Se(e,t){we(e,e,t)}function we(e,t,n){se(n)||("string"==typeof n&&(n=Oe(n)),n=[n]);for(var o=0;o<n.length;o++)e.parentNode.insertBefore(n[o],t)}function ye(){var n=t.documentElement;return(e.pageYOffset||n.scrollTop)-(n.clientTop||0)}function Ee(e){return Array.prototype.filter.call(e.parentNode.children,function(t){return t!==e})}function xe(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function Le(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function Ae(n,o,r){var i;r=void 0===r?{}:r,"function"==typeof e.CustomEvent?i=new CustomEvent(o,{detail:r}):(i=t.createEvent("CustomEvent")).initCustomEvent(o,!0,!0,r),n.dispatchEvent(i)}function Te(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function ke(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Oe(e){var n=t.createElement("div");return n.innerHTML=e.trim(),n.firstChild}function Me(e){e=le(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function Ce(e,t,n){for(var o=e[n],r=[];o;)(Te(o,t)||null==t)&&r.push(o),o=o[n];return r}function He(e,t){return Ce(e,t,"nextElementSibling")}function Ie(e,t){return Ce(e,t,"previousElementSibling")}return e.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,n){n=n||e;for(var o=0;o<this.length;o++)t.call(n,this[o],o,this)}),e.fp_utils={$:K,deepExtend:$,hasClass:q,getWindowHeight:Q,css:J,until:Z,prevUntil:ee,nextUntil:te,prev:ne,next:oe,last:re,index:ie,getList:le,hide:ae,show:ce,isArrayOrList:se,addClass:ue,removeClass:fe,appendTo:de,wrap:ve,wrapAll:pe,wrapInner:he,unwrap:ge,closest:me,after:be,before:Se,insertBefore:we,getScrollTop:ye,siblings:Ee,preventDefault:xe,isFunction:Le,trigger:Ae,matches:Te,toggle:ke,createElementFromHTML:Oe,remove:Me,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:Ce,nextAll:He,prevAll:Ie,showError:X},function(Z,le){var se=le&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(le.licenseKey)||t.domain.indexOf("alvarotrigo.com")>-1,ve=K("html, body"),we=K("html")[0],Ce=K("body")[0];if(!q(we,a)){var Be={};le=$({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fp_scrolloverflow?e.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof Z?K(Z)[0]:Z,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:v,slideSelector:O,v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},le);var Re,je,Ne,Pe,ze=!1,De=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Ve="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,_e="string"==typeof Z?K(Z)[0]:Z,Fe=Q(),We=G(),Ye=!1,Ue=!0,Xe=!0,Ke=[],$e={m:{up:!0,down:!0,left:!0,right:!0}};$e.k=$({},$e.m);var qe,Qe,Ge,Je,Ze,et,tt,nt,ot,rt=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},it={touchmove:"ontouchmove"in e?"touchmove":rt.move,touchstart:"ontouchstart"in e?"touchstart":rt.down},lt='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',at=!1;try{var ct=Object.defineProperty({},"passive",{get:function(){at=!0}});e.addEventListener("testPassive",null,ct),e.removeEventListener("testPassive",null,ct)}catch(e){}var st,ut,ft=$({},le),dt=!1,vt=!0,pt=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];ro(),e.fp_easings=$(e.fp_easings,{easeInOutCubic:function(e,t,n,o){return(e/=o/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),_e&&(Be.version="3.0.8",Be.setAutoScrolling=At,Be.setRecordHistory=Tt,Be.setScrollingSpeed=kt,Be.setFitToSection=Ot,Be.setLockAnchors=function(e){le.lockAnchors=e},Be.setMouseWheelScrolling=Mt,Be.setAllowScrolling=Ct,Be.setKeyboardScrolling=It,Be.moveSectionUp=Bt,Be.moveSectionDown=Rt,Be.silentMoveTo=jt,Be.moveTo=Nt,Be.moveSlideRight=Pt,Be.moveSlideLeft=zt,Be.fitToSection=Jt,Be.reBuild=Dt,Be.setResponsive=_t,Be.getFullpageData=function(){return le},Be.destroy=function(n){At(!1,"internal"),Ct(!0),Ht(!1),It(!1),ue(_e,l),[Ze,Je,Qe,et,tt,ot,Ge].forEach(function(e){clearTimeout(e)}),e.removeEventListener("scroll",Gt),e.removeEventListener("hashchange",Ln),e.removeEventListener("resize",jn),t.removeEventListener("keydown",Tn),t.removeEventListener("keyup",kn),["click","touchstart"].forEach(function(e){t.removeEventListener(e,Ft)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){t.removeEventListener(e,Yt,!0)}),n&&(eo(0),K("img[data-src], source[data-src], audio[data-src], iframe[data-src]",_e).forEach(function(e){hn(e,"src")}),K("img[data-srcset]").forEach(function(e){hn(e,"srcset")}),Me(K(L+", "+z+", "+V)),J(K(h),{height:"","background-color":"",padding:""}),J(K(C),{width:""}),J(_e,{height:"",position:"","-ms-touch-action":"","touch-action":""}),J(ve,{overflow:"",height:""}),fe(we,a),fe(Ce,r),Ce.className.split(/\s+/).forEach(function(e){0===e.indexOf(c)&&fe(Ce,e)}),K(h+", "+C).forEach(function(e){le.scrollOverflowHandler&&le.scrollOverflow&&le.scrollOverflowHandler.remove(e),fe(e,N+" "+s+" "+f);var t=e.getAttribute("data-fp-styles");t&&e.setAttribute("style",e.getAttribute("data-fp-styles")),q(e,p)&&!dt&&e.removeAttribute("data-anchor")}),Dn(_e),[b,j,B].forEach(function(e){K(e,_e).forEach(function(e){ge(e)})}),J(_e,{"-webkit-transition":"none",transition:"none"}),e.scrollTo(0,0),[p,M,R].forEach(function(e){fe(K("."+e),e)}))},Be.getActiveSection=function(){return new co(K(g)[0])},Be.getActiveSlide=function(){return dn(K(H,K(g)[0])[0])},Be.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<K(le.sectionSelector,_e).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<K(le.sectionSelector,_e).length;t++)e.push(0);return e}(),options:le,setAutoScrolling:At},Be.shared={afterRenderActions:Qt,isNormalScrollElement:!1},e.fullpage_api=Be,le.$&&Object.keys(Be).forEach(function(e){le.$.fn.fullpage[e]=Be[e]}),le.css3&&(le.css3=function(){var n,o=t.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var i in o.style.display="block",t.body.insertBefore(o,null),r)void 0!==o.style[i]&&(o.style[i]="translate3d(1px,1px,1px)",n=e.getComputedStyle(o).getPropertyValue(r[i]));return t.body.removeChild(o),void 0!==n&&n.length>0&&"none"!==n}()),le.scrollBar=le.scrollBar||le.hybrid,function(){if(!le.anchors.length){var e=K(le.sectionSelector.split(",").join("[data-anchor],")+"[data-anchor]",_e);e.length&&(dt=!0,e.forEach(function(e){le.anchors.push(e.getAttribute("data-anchor").toString())}))}if(!le.navigationTooltips.length){var t=K(le.sectionSelector.split(",").join("[data-tooltip],")+"[data-tooltip]",_e);t.length&&t.forEach(function(e){le.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})}}(),function(){J(_e,{height:"100%",position:"relative"}),ue(_e,n),ue(we,a),Fe=Q(),fe(_e,l),ue(K(le.sectionSelector,_e),p),ue(K(le.slideSelector,_e),M);for(var e=K(h),o=0;o<e.length;o++){var r=o,i=e[o],c=K(C,i),u=c.length;i.setAttribute("data-fp-styles",i.getAttribute("style")),Kt(i,r),$t(i,r),u>0?Xt(i,c,u):le.verticalCentered&&Fn(i)}le.fixedElements&&le.css3&&K(le.fixedElements).forEach(function(e){Ce.appendChild(e)}),le.navigation&&function(){var e=t.createElement("div");e.setAttribute("id",x);var n=t.createElement("ul");e.appendChild(n),de(e,Ce);var o=K(L)[0];ue(o,"fp-"+le.navigationPosition),le.showActiveTooltip&&ue(o,k);for(var r="",i=0;i<K(h).length;i++){var l="";le.anchors.length&&(l=le.anchors[i]),r+='<li><a href="#'+l+'"><span class="fp-sr-only">'+qt(i,"Section")+"</span><span></span></a>";var a=le.navigationTooltips[i];void 0!==a&&""!==a&&(r+='<div class="'+A+" fp-"+le.navigationPosition+'">'+a+"</div>"),r+="</li>"}K("ul",o)[0].innerHTML=r,J(K(L),{"margin-top":"-"+K(L)[0].offsetHeight/2+"px"});var c=K("li",K(L)[0])[ie(K(g)[0],h)];ue(K("a",c),s)}(),K('iframe[src*="youtube.com/embed/"]',_e).forEach(function(e){var t,n,o;n="enablejsapi=1",o=(t=e).getAttribute("src"),t.setAttribute("src",o+(/\?/.test(o)?"&":"?")+n)}),le.scrollOverflow&&(qe=le.scrollOverflowHandler.init(le))}(),Ct(!0),Ht(!0),At(le.autoScrolling,"internal"),Pn(),Gn(),"complete"===t.readyState&&xn(),e.addEventListener("load",xn),le.scrollOverflow||Qt(),function(){for(var e=1;e<4;e++)ot=setTimeout(Ut,350*e)}(),e.addEventListener("scroll",Gt),e.addEventListener("hashchange",Ln),e.addEventListener("blur",Hn),e.addEventListener("resize",jn),t.addEventListener("keydown",Tn),t.addEventListener("keyup",kn),["click","touchstart"].forEach(function(e){t.addEventListener(e,Ft)}),le.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){Wt(e,!1)}),["mouseleave","touchend"].forEach(function(e){Wt(e,!0)})));var ht=!1,gt=0,mt=0,bt=0,St=0,wt=0,yt=(new Date).getTime(),Et=0,xt=0,Lt=Fe;return Be}function At(e,t){e||eo(0),oo("autoScrolling",e,t);var n=K(g)[0];if(le.autoScrolling&&!le.scrollBar)J(ve,{overflow:"hidden",height:"100%"}),Tt(ft.recordHistory,"internal"),J(_e,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&eo(n.offsetTop);else if(J(ve,{overflow:"visible",height:"initial"}),Tt(!!le.autoScrolling&&ft.recordHistory,"internal"),J(_e,{"-ms-touch-action":"","touch-action":""}),null!=n){var o=vn(n.offsetTop);o.element.scrollTo(0,o.options)}}function Tt(e,t){oo("recordHistory",e,t)}function kt(e,t){oo("scrollingSpeed",e,t)}function Ot(e,t){oo("fitToSection",e,t)}function Mt(n){n?(function(){var n,o="";e.addEventListener?n="addEventListener":(n="attachEvent",o="on");var r="onwheel"in t.createElement("div")?"wheel":void 0!==t.onmousewheel?"mousewheel":"DOMMouseScroll",i=!!at&&{passive:!1};"DOMMouseScroll"==r?t[n](o+"MozMousePixelScroll",ln,i):t[n](o+r,ln,i)}(),_e.addEventListener("mousedown",On),_e.addEventListener("mouseup",Mn)):(t.addEventListener?(t.removeEventListener("mousewheel",ln,!1),t.removeEventListener("wheel",ln,!1),t.removeEventListener("MozMousePixelScroll",ln,!1)):t.detachEvent("onmousewheel",ln),_e.removeEventListener("mousedown",On),_e.removeEventListener("mouseup",Mn))}function Ct(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){no(e,t,"m")}):no(e,"all","m")}function Ht(e){e?(Mt(!0),function(){if(De||Ve){le.autoScrolling&&(Ce.removeEventListener(it.touchmove,en,{passive:!1}),Ce.addEventListener(it.touchmove,en,{passive:!1}));var e=le.touchWrapper;e.removeEventListener(it.touchstart,on),e.removeEventListener(it.touchmove,tn,{passive:!1}),e.addEventListener(it.touchstart,on),e.addEventListener(it.touchmove,tn,{passive:!1})}}()):(Mt(!1),function(){if(De||Ve){le.autoScrolling&&(Ce.removeEventListener(it.touchmove,tn,{passive:!1}),Ce.removeEventListener(it.touchmove,en,{passive:!1}));var e=le.touchWrapper;e.removeEventListener(it.touchstart,on),e.removeEventListener(it.touchmove,tn,{passive:!1})}}())}function It(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){no(e,t,"k")}):(no(e,"all","k"),le.keyboardScrolling=e)}function Bt(){var e=ee(K(g)[0],h);e||!le.loopTop&&!le.continuousVertical||(e=re(K(h))),null!=e&&sn(e,null,!0)}function Rt(){var e=te(K(g)[0],h);e||!le.loopBottom&&!le.continuousVertical||(e=K(h)[0]),null!=e&&sn(e,null,!1)}function jt(e,t){kt(0,"internal"),Nt(e,t),kt(ft.scrollingSpeed,"internal")}function Nt(e,t){var n=Un(e);void 0!==t?Xn(e,t):null!=n&&sn(n)}function Pt(e){an("right",e)}function zt(e){an("left",e)}function Dt(t){if(!q(_e,l)){Ye=!0,Fe=Q(),We=G();for(var n=K(h),o=0;o<n.length;++o){var r=n[o],i=K(B,r)[0],a=K(C,r);le.verticalCentered&&J(K(b,r),{height:Wn(r)+"px"}),J(r,{height:Fe+"px"}),a.length>1&&Bn(i,K(H,i)[0])}le.scrollOverflow&&qe.createScrollBarForAll();var c=ie(K(g)[0],h);c&&jt(c+1),Ye=!1,Le(le.afterResize)&&t&&le.afterResize.call(_e,e.innerWidth,e.innerHeight),Le(le.afterReBuild)&&!t&&le.afterReBuild.call(_e)}}function Vt(){return q(Ce,r)}function _t(e){var t=Vt();e?t||(At(!1,"internal"),Ot(!1,"internal"),ae(K(L)),ue(Ce,r),Le(le.afterResponsive)&&le.afterResponsive.call(_e,e),le.scrollOverflow&&qe.createScrollBarForAll()):t&&(At(ft.autoScrolling,"internal"),Ot(ft.autoScrolling,"internal"),ce(K(L)),fe(Ce,r),Le(le.afterResponsive)&&le.afterResponsive.call(_e,e))}function Ft(e){var t=e.target;t&&me(t,L+" a")?function(e){xe(e);var t=ie(me(this,L+" li"));sn(K(h)[t])}.call(t,e):Te(t,T)?function(){Ae(ne(this),"click")}.call(t):Te(t,V)?function(){var e=me(this,h);q(this,_)?$e.m.left&&zt(e):$e.m.right&&Pt(e)}.call(t,e):Te(t,D)||null!=me(t,D)?function(e){xe(e);var t=K(B,me(this,h))[0],n=K(C,t)[ie(me(this,"li"))];Bn(t,n)}.call(t,e):me(t,le.menu+" [data-menuanchor]")&&function(e){!K(le.menu)[0]||!le.lockAnchors&&le.anchors.length||(xe(e),Nt(this.getAttribute("data-menuanchor")))}.call(t,e)}function Wt(e,n){t["fp_"+e]=n,t.addEventListener(e,Yt,!0)}function Yt(e){var n=e.type,o=!1,r=le.scrollOverflow,i="mouseleave"===n?e.toElement||e.relatedTarget:e.target;if(i==t||!i)return Ht(!0),void(r&&le.scrollOverflowHandler.setIscroll(i,!0));"touchend"===n&&(vt=!1,setTimeout(function(){vt=!0},800)),("mouseenter"!==n||vt)&&(le.normalScrollElements.split(",").forEach(function(e){if(!o){var t=Te(i,e),n=me(i,e);(t||n)&&(Be.shared.isNormalScrollElement||(Ht(!1),r&&le.scrollOverflowHandler.setIscroll(i,!1)),Be.shared.isNormalScrollElement=!0,o=!0)}}),!o&&Be.shared.isNormalScrollElement&&(Ht(!0),r&&le.scrollOverflowHandler.setIscroll(i,!0),Be.shared.isNormalScrollElement=!1))}function Ut(){var e=Q(),t=G();Fe===e&&We===t||(Fe=e,We=t,Dt(!0))}function Xt(e,n,o){var r=100*o,i=100/o,l=t.createElement("div");l.className=I,pe(n,l);var a=t.createElement("div");a.className=R,pe(n,a),J(K(j,e),{width:r+"%"}),o>1&&(le.controlArrows&&function(e){var t=[Oe('<div class="'+F+'"></div>'),Oe('<div class="'+Y+'"></div>')];be(K(B,e)[0],t),"#fff"!==le.controlArrowColor&&(J(K(U,e),{"border-color":"transparent transparent transparent "+le.controlArrowColor}),J(K(W,e),{"border-color":"transparent "+le.controlArrowColor+" transparent transparent"})),le.loopHorizontal||ae(K(W,e))}(e),le.slidesNavigation&&function(e,t){de(Oe('<div class="'+P+'"><ul></ul></div>'),e);var n=K(z,e)[0];ue(n,"fp-"+le.slidesNavPosition);for(var o=0;o<t;o++)de(Oe('<li><a href="#"><span class="fp-sr-only">'+qt(o,"Slide")+"</span><span></span></a></li>"),K("ul",n)[0]);J(n,{"margin-left":"-"+n.innerWidth/2+"px"}),ue(K("a",K("li",n)[0]),s)}(e,o)),n.forEach(function(e){J(e,{width:i+"%"}),le.verticalCentered&&Fn(e)});var c=K(H,e)[0];null!=c&&(0!==ie(K(g),h)||0===ie(K(g),h)&&0!==ie(c))?Zn(c,"internal"):ue(n[0],s)}function Kt(e,t){t||null!=K(g)[0]||ue(e,s),Pe=K(g)[0],J(e,{height:Fe+"px"}),le.paddingTop&&J(e,{"padding-top":le.paddingTop}),le.paddingBottom&&J(e,{"padding-bottom":le.paddingBottom}),void 0!==le.sectionsColor[t]&&J(e,{"background-color":le.sectionsColor[t]}),void 0!==le.anchors[t]&&e.setAttribute("data-anchor",le.anchors[t])}function $t(e,t){void 0!==le.anchors[t]&&q(e,s)&&Vn(le.anchors[t],t),le.menu&&le.css3&&null!=me(K(le.menu)[0],o)&&K(le.menu).forEach(function(e){Ce.appendChild(e)})}function qt(e,t){return le.navigationTooltips[e]||le.anchors[e]||t+" "+(e+1)}function Qt(){var e,t,n=K(g)[0];ue(n,f),mn(n),gn(),Sn(n),le.scrollOverflow&&le.scrollOverflowHandler.afterLoad(),e=An(),t=Un(e.section),e.section&&t&&(void 0===t||ie(t)!==ie(Pe))||!Le(le.afterLoad)||un("afterLoad",{activeSection:n,element:n,direction:null,anchorLink:n.getAttribute("data-anchor"),sectionIndex:ie(n,h)}),Le(le.afterRender)&&un("afterRender")}function Gt(){var e,t,n,o;if(!le.autoScrolling||le.scrollBar){var r=ye(),i=function(e){var t=e>gt?"down":"up";return gt=e,Et=e,t}(r),l=0,a=r+Q()/2,c=Ce.offsetHeight-Q()===r,u=K(h);if(c)l=u.length-1;else if(r)for(var d=0;d<u.length;++d)u[d].offsetTop<=a&&(l=d);else l=0;if(t=i,n=K(g)[0].offsetTop,o=n+Q(),("up"==t?o>=ye()+Q():n<=ye())&&(q(K(g)[0],f)||(ue(K(g)[0],f),fe(Ee(K(g)[0]),f))),!q(e=u[l],s)){ht=!0;var v,p,m=K(g)[0],b=ie(m,h)+1,S=_n(e),w=e.getAttribute("data-anchor"),y=ie(e,h)+1,E=K(H,e)[0],x={activeSection:m,sectionIndex:y-1,anchorLink:w,element:e,leavingSection:b,direction:S};E&&(p=E.getAttribute("data-anchor"),v=ie(E)),Xe&&(ue(e,s),fe(Ee(e),s),Le(le.onLeave)&&un("onLeave",x),Le(le.afterLoad)&&un("afterLoad",x),yn(m),mn(e),Sn(e),Vn(w,y-1),le.anchors.length&&(Re=w),$n(v,p,w)),clearTimeout(et),et=setTimeout(function(){ht=!1},100)}le.fitToSection&&(clearTimeout(tt),tt=setTimeout(function(){le.fitToSection&&K(g)[0].offsetHeight<=Fe&&Jt()},le.fitToSectionDelay))}}function Jt(){Xe&&(Ye=!0,sn(K(g)[0]),Ye=!1)}function Zt(e){if($e.m[e]){var t="down"===e?Rt:Bt;if(le.scrollOverflow){var n=le.scrollOverflowHandler.scrollable(K(g)[0]),o="down"===e?"bottom":"top";if(null!=n){if(!le.scrollOverflowHandler.isScrolled(o,n))return!0;t()}else t()}else t()}}function en(e){le.autoScrolling&&nn(e)&&$e.m.up&&xe(e)}function tn(t){var n=me(t.target,h)||K(g)[0];if(nn(t)){le.autoScrolling&&xe(t);var o=Jn(t);St=o.y,wt=o.x,K(B,n).length&&Math.abs(bt-wt)>Math.abs(mt-St)?!ze&&Math.abs(bt-wt)>G()/100*le.touchSensitivity&&(bt>wt?$e.m.right&&Pt(n):$e.m.left&&zt(n)):le.autoScrolling&&Xe&&Math.abs(mt-St)>e.innerHeight/100*le.touchSensitivity&&(mt>St?Zt("down"):St>mt&&Zt("up"))}}function nn(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function on(e){if(le.fitToSection&&(st=!1),nn(e)){var t=Jn(e);mt=t.y,bt=t.x}}function rn(e,t){for(var n=0,o=e.slice(Math.max(e.length-t,1)),r=0;r<o.length;r++)n+=o[r];return Math.ceil(n/t)}function ln(t){var n=(new Date).getTime(),o=q(K(d)[0],E);if(!$e.m.down&&!$e.m.up)return xe(t),!1;if(le.autoScrolling&&!Ne&&!o){var r=(t=t||e.event).wheelDelta||-t.deltaY||-t.detail,i=Math.max(-1,Math.min(1,r)),l=void 0!==t.wheelDeltaX||void 0!==t.deltaX,a=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!l;Ke.length>149&&Ke.shift(),Ke.push(Math.abs(r)),le.scrollBar&&xe(t);var c=n-yt;return yt=n,c>200&&(Ke=[]),Xe&&rn(Ke,10)>=rn(Ke,70)&&a&&Zt(i<0?"down":"up"),!1}le.fitToSection&&(st=!1)}function an(e,t){var n=null==t?K(g)[0]:t,o=K(B,n)[0];if(!(null==o||ze||K(C,o).length<2)){var r=K(H,o)[0],i=null;if(null==(i="left"===e?ee(r,C):te(r,C))){if(!le.loopHorizontal)return;var l=Ee(r);i="left"===e?l[l.length-1]:l[0]}ze=!Be.test.isTesting,Bn(o,i,e)}}function cn(){for(var e=K(H),t=0;t<e.length;t++)Zn(e[t],"internal")}function sn(e,t,n){if(null!=e){var o,r,i={element:e,callback:t,isMovementUp:n,dtop:function(e){var t=e.offsetHeight,n=e.offsetTop,o=n,r=n>Et,i=o-Fe+t,l=le.bigSectionsDestination;return t>Fe?(r||l)&&"bottom"!==l||(o=i):(r||Ye&&null==oe(e))&&(o=i),Et=o,o}(e),yMovement:_n(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:ie(e,h),activeSlide:K(H,e)[0],activeSection:K(g)[0],leavingSection:ie(K(g),h)+1,localIsResizing:Ye};if(!(i.activeSection==e&&!Ye||le.scrollBar&&ye()===i.dtop&&!q(e,S))){if(null!=i.activeSlide&&(o=i.activeSlide.getAttribute("data-anchor"),r=ie(i.activeSlide)),!i.localIsResizing){var l=i.yMovement;if(void 0!==n&&(l=n?"up":"down"),i.direction=l,Le(le.onLeave)&&!1===un("onLeave",i))return}le.autoScrolling&&le.continuousVertical&&void 0!==i.isMovementUp&&(!i.isMovementUp&&"up"==i.yMovement||i.isMovementUp&&"down"==i.yMovement)&&(i=function(e){return e.isMovementUp?Se(K(g)[0],He(e.activeSection,h)):be(K(g)[0],Ie(e.activeSection,h).reverse()),eo(K(g)[0].offsetTop),cn(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=_n(e.element),e}(i)),i.localIsResizing||yn(i.activeSection),le.scrollOverflow&&le.scrollOverflowHandler.beforeLeave(),ue(e,s),fe(Ee(e),s),mn(e),le.scrollOverflow&&le.scrollOverflowHandler.onLeave(),Xe=Be.test.isTesting,$n(r,o,i.anchorLink,i.sectionIndex),function(e){if(le.css3&&le.autoScrolling&&!le.scrollBar){var t="translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)";Yn(t,!0),le.scrollingSpeed?(clearTimeout(Je),Je=setTimeout(function(){pn(e)},le.scrollingSpeed)):pn(e)}else{var n=vn(e.dtop);Be.test.top=-e.dtop+"px",io(n.element,n.options,le.scrollingSpeed,function(){le.scrollBar?setTimeout(function(){pn(e)},30):pn(e)})}}(i),Re=i.anchorLink,Vn(i.anchorLink,i.sectionIndex)}}}function un(e,t){var n,o=function(e,t){var n;return(n=le.v2compatible?{afterRender:function(){return[_e]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:fn(K(g)[0]),slide:dn(K(H,K(g)[0])[0])}},onLeave:function(){return{origin:fn(t.activeSection),destination:fn(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:fn(t.section),origin:dn(t.prevSlide),destination:dn(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}})[e]()}(e,t);if(le.v2compatible){if(!1===le[e].apply(o[0],o.slice(1)))return!1}else if(Ae(_e,e,o),!1===le[e].apply(o[Object.keys(o)[0]],(n=o,Object.keys(n).map(function(e){return n[e]}))))return!1;return!0}function fn(e){return e?new co(e):null}function dn(e){return e?new so(e):null}function vn(t){var n={};return le.autoScrolling&&!le.scrollBar?(n.options=-t,n.element=K(o)[0]):(n.options=t,n.element=e),n}function pn(e){!function(e){null!=e.wrapAroundElements&&(e.isMovementUp?Se(K(h)[0],e.wrapAroundElements):be(K(h)[K(h).length-1],e.wrapAroundElements),eo(K(g)[0].offsetTop),cn())}(e),Le(le.afterLoad)&&!e.localIsResizing&&un("afterLoad",e),le.scrollOverflow&&le.scrollOverflowHandler.afterLoad(),e.localIsResizing||Sn(e.element),ue(e.element,f),fe(Ee(e.element),f),gn(),Xe=!0,Le(e.callback)&&e.callback()}function hn(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function gn(){var e=K(w)[0]||Vt()&&K(y)[0];le.lazyLoading&&e&&K(h+":not("+u+")").forEach(function(e){var t,n,o;t=e.getBoundingClientRect(),n=t.top,o=t.bottom,(n+2<Fe&&n>0||o>2&&o<Fe)&&mn(e)})}function mn(e){le.lazyLoading&&K("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",En(e)).forEach(function(t){if(["src","srcset"].forEach(function(n){var o=t.getAttribute("data-"+n);null!=o&&o&&(hn(t,n),t.addEventListener("load",function(){bn(e)}))}),Te(t,"source")){var n=me(t,"video, audio");n&&(n.load(),n.onloadeddata=function(){bn(e)})}})}function bn(e){le.scrollOverflow&&(clearTimeout(ut),ut=setTimeout(function(){qe.createScrollBar(e)},200))}function Sn(e){var t=En(e);K("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),K('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&wn(e),e.onload=function(){e.hasAttribute("data-autoplay")&&wn(e)}})}function wn(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function yn(e){var t=En(e);K("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),K('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function En(e){var t=K(H,e);return t.length&&(e=t[0]),e}function xn(){var e=An(),t=e.section,n=e.slide;t&&(le.animateAnchor?Xn(t,n):jt(t,n))}function Ln(){if(!ht&&!le.lockAnchors){var e=An(),t=e.section,n=e.slide,o=void 0===Re,r=void 0===Re&&void 0===n&&!ze;t&&t.length&&(t&&t!==Re&&!o||r||!ze&&je!=n)&&Xn(t,n)}}function An(){var t,n,o=e.location.hash;if(o.length){var r=o.replace("#","").split("/"),i=o.indexOf("#/")>-1;t=i?"/"+r[1]:decodeURIComponent(r[0]);var l=i?r[2]:r[1];l&&l.length&&(n=decodeURIComponent(l))}return{section:t,slide:n}}function Tn(e){clearTimeout(nt);var n=t.activeElement,o=e.keyCode;9===o?function(e){var n=e.shiftKey,o=t.activeElement,r=Cn(En(K(g)[0]));function i(e){return xe(e),r[0]?r[0].focus():null}(function(e){var n=Cn(t),o=n.indexOf(t.activeElement),r=e.shiftKey?o-1:o+1,i=n[r],l=dn(me(i,C)),a=fn(me(i,h));return!l&&!a})(e)||(o?null==me(o,g+","+g+" "+H)&&(o=i(e)):i(e),(!n&&o==r[r.length-1]||n&&o==r[0])&&xe(e))}(e):Te(n,"textarea")||Te(n,"input")||Te(n,"select")||"true"===n.getAttribute("contentEditable")||""===n.getAttribute("contentEditable")||!le.keyboardScrolling||!le.autoScrolling||([40,38,32,33,34].indexOf(o)>-1&&xe(e),Ne=e.ctrlKey,nt=setTimeout(function(){!function(e){var n=e.shiftKey,o=t.activeElement,r=Te(o,"video")||Te(o,"audio");if(Xe||!([37,39].indexOf(e.keyCode)<0))switch(e.keyCode){case 38:case 33:$e.k.up&&Bt();break;case 32:if(n&&$e.k.up&&!r){Bt();break}case 40:case 34:$e.k.down&&(32===e.keyCode&&r||Rt());break;case 36:$e.k.up&&Nt(1);break;case 35:$e.k.down&&Nt(K(h).length);break;case 37:$e.k.left&&zt();break;case 39:$e.k.right&&Pt()}}(e)},150))}function kn(e){Ue&&(Ne=e.ctrlKey)}function On(e){2==e.which&&(xt=e.pageY,_e.addEventListener("mousemove",In))}function Mn(e){2==e.which&&_e.removeEventListener("mousemove",In)}function Cn(e){return[].slice.call(K(lt,e)).filter(function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent})}function Hn(){Ue=!1,Ne=!1}function In(e){le.autoScrolling&&(Xe&&(e.pageY<xt&&$e.m.up?Bt():e.pageY>xt&&$e.m.down&&Rt()),xt=e.pageY)}function Bn(e,t,n){var o,r,i=me(e,h),l={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:ie(t),section:i,sectionIndex:ie(i,h),anchorLink:i.getAttribute("data-anchor"),slidesNav:K(z,i)[0],slideAnchor:Qn(t),prevSlide:K(H,i)[0],prevSlideIndex:ie(K(H,i)[0]),localIsResizing:Ye};l.xMovement=(o=l.prevSlideIndex,r=l.slideIndex,o==r?"none":o>r?"left":"right"),l.direction=l.direction?l.direction:l.xMovement,l.localIsResizing||(Xe=!1),le.onSlideLeave&&!l.localIsResizing&&"none"!==l.xMovement&&Le(le.onSlideLeave)&&!1===un("onSlideLeave",l)?ze=!1:(ue(t,s),fe(Ee(t),s),l.localIsResizing||(yn(l.prevSlide),mn(t)),!le.loopHorizontal&&le.controlArrows&&(ke(K(W,i),0!==l.slideIndex),ke(K(U,i),null!=oe(t))),q(i,s)&&!l.localIsResizing&&$n(l.slideIndex,l.slideAnchor,l.anchorLink,l.sectionIndex),function(e,t,n){var o=t.destinyPos;if(le.css3){var r="translate3d(-"+Math.round(o.left)+"px, 0px, 0px)";Be.test.translate3dH[t.sectionIndex]=r,J(zn(K(j,e)),to(r)),Ze=setTimeout(function(){n&&Rn(t)},le.scrollingSpeed)}else Be.test.left[t.sectionIndex]=Math.round(o.left),io(e,Math.round(o.left),le.scrollingSpeed,function(){n&&Rn(t)})}(e,l,!0))}function Rn(e){var t,n;t=e.slidesNav,n=e.slideIndex,le.slidesNavigation&&null!=t&&(fe(K(u,t),s),ue(K("a",K("li",t)[n]),s)),e.localIsResizing||(Le(le.afterSlideLoad)&&un("afterSlideLoad",e),Xe=!0,Sn(e.destiny)),ze=!1}function jn(){clearTimeout(Qe),Qe=setTimeout(function(){for(var e=0;e<4;e++)Ge=setTimeout(Nn,200*e)},200)}function Nn(){if(Pn(),De){var e=t.activeElement;if(!Te(e,"textarea")&&!Te(e,"input")&&!Te(e,"select")){var n=Q();Math.abs(n-Lt)>20*Math.max(Lt,n)/100&&(Dt(!0),Lt=n)}}else Ut()}function Pn(){var t=le.responsive||le.responsiveWidth,n=le.responsiveHeight,o=t&&e.innerWidth<t,r=n&&e.innerHeight<n;t&&n?_t(o||r):t?_t(o):n&&_t(r)}function zn(e){var t="all "+le.scrollingSpeed+"ms "+le.easingcss3;return fe(e,i),J(e,{"-webkit-transition":t,transition:t})}function Dn(e){return ue(e,i)}function Vn(e,t){var n;n=e,K(le.menu).forEach(function(e){le.menu&&null!=e&&(fe(K(u,e),s),ue(K('[data-menuanchor="'+n+'"]',e),s))}),function(e,t){le.navigation&&null!=K(L)[0]&&(fe(K(u,K(L)[0]),s),ue(e?K('a[href="#'+e+'"]',K(L)[0]):K("a",K("li",K(L)[0])[t]),s))}(e,t)}function _n(e){var t=ie(K(g)[0],h),n=ie(e,h);return t==n?"none":t>n?"up":"down"}function Fn(e){if(!q(e,N)){var n=t.createElement("div");n.className=m,n.style.height=Wn(e)+"px",ue(e,N),he(e,n)}}function Wn(e){var t=Fe;if(le.paddingTop||le.paddingBottom){var n=e;q(n,p)||(n=me(e,h));var o=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=Fe-o}return t}function Yn(e,t){t?zn(_e):Dn(_e),J(_e,to(e)),Be.test.translate3d=e,setTimeout(function(){fe(_e,i)},10)}function Un(e){var t=K(h+'[data-anchor="'+e+'"]',_e)[0];if(!t){var n=void 0!==e?e-1:0;t=K(h)[n]}return t}function Xn(e,t){var n=Un(e);if(null!=n){var o=function(e,t){var n=K(C+'[data-anchor="'+e+'"]',t)[0];return null==n&&(e=void 0!==e?e:0,n=K(C,t)[e]),n}(t,n);Qn(n)===Re||q(n,s)?Kn(o):sn(n,function(){Kn(o)})}}function Kn(e){null!=e&&Bn(me(e,B),e)}function $n(e,t,n,o){var r="";le.anchors.length&&!le.lockAnchors&&(e?(null!=n&&(r=n),null==t&&(t=e),je=t,qn(r+"/"+t)):null!=e?(je=t,qn(n)):qn(n)),Gn()}function qn(t){if(le.recordHistory)location.hash=t;else if(De||Ve)e.history.replaceState(void 0,void 0,"#"+t);else{var n=e.location.href.split("#")[0];e.location.replace(n+"#"+t)}}function Qn(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=ie(e);return null==t&&(t=n),t}function Gn(){var e=K(g)[0],t=K(H,e)[0],n=Qn(e),o=Qn(t),r=String(n);t&&(r=r+"-"+o),r=r.replace("/","-").replace("#","");var i=new RegExp("\\b\\s?"+c+"-[^\\s]+\\b","g");Ce.className=Ce.className.replace(i,""),ue(Ce,c+"-"+r)}function Jn(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Ve&&nn(e)&&le.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Zn(e,t){kt(0,"internal"),void 0!==t&&(Ye=!0),Bn(me(e,B),e),void 0!==t&&(Ye=!1),kt(ft.scrollingSpeed,"internal")}function eo(e){var t=Math.round(e);if(le.css3&&le.autoScrolling&&!le.scrollBar)Yn("translate3d(0px, -"+t+"px, 0px)",!1);else if(le.autoScrolling&&!le.scrollBar)J(_e,{top:-t+"px"}),Be.test.top=-t+"px";else{var n=vn(t);lo(n.element,n.options)}}function to(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function no(e,t,n){"all"!==t?$e[n][t]=e:Object.keys($e[n]).forEach(function(t){$e[n][t]=e})}function oo(e,t,n){le[e]=t,"internal"!==n&&(ft[e]=t)}function ro(){var e=le.licenseKey,t="font-size: 15px;background:yellow;";se?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(X("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),X("error","https://github.com/alvarotrigo/fullPage.js#options.")),q(we,a)?X("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(le.continuousVertical&&(le.loopTop||le.loopBottom)&&(le.continuousVertical=!1,X("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!le.scrollOverflow||!le.scrollBar&&le.autoScrolling||X("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!le.continuousVertical||!le.scrollBar&&le.autoScrolling||(le.continuousVertical=!1,X("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),le.scrollOverflow&&null==le.scrollOverflowHandler&&(le.scrollOverflow=!1,X("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),pt.forEach(function(e){le[e]&&X("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),le.anchors.forEach(function(e){var t=[].slice.call(K("[name]")).filter(function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()}),n=[].slice.call(K("[id]")).filter(function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()});if(n.length||t.length){X("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var o=n.length?"id":"name";(n.length||t.length)&&X("error",'"'+e+'" is is being used by another element `'+o+"` property")}}))}function io(t,n,o,r){var i=function(t){return t.self!=e&&q(t,I)?t.scrollLeft:!le.autoScrolling||le.scrollBar?ye():t.offsetTop}(t),l=n-i,a=0;st=!0;var c=function(){if(st){var s=n;a+=20,o&&(s=e.fp_easings[le.easing](a,i,l,o)),lo(t,s),a<o?setTimeout(c,20):void 0!==r&&r()}else a<o&&r()};c()}function lo(t,n){!le.autoScrolling||le.scrollBar||t.self!=e&&q(t,I)?t.self!=e&&q(t,I)?t.scrollLeft=n:t.scrollTo(0,n):t.style.top=n+"px"}function ao(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=ie(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function co(e){ao.call(this,e,h)}function so(e){ao.call(this,e,C)}ro()}}),window.jQuery&&window.fullpage&&function(e,t){"use strict";e&&t?e.fn.fullpage=function(n){n=e.extend({},n,{$:e});new t(this[0],n)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage)},function(e,t,n){"use strict";n.r(t);var o=n(0);new(n.n(o).a)("#myFullpage",{navigation:!0,sectionsColor:["#ff5f45","#0798ec","#fc6c7c","grey"]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,